/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module sum (
  input A,
  input B,
  input Ci,
  output S
);
  assign S = ((A ^ B) ^ Ci);
endmodule

module carryout (
  input A,
  input B,
  input Ci,
  output Co
);
  assign Co = ((A & B) | (B & Ci) | (A & Ci));
endmodule

module fulladder (
  input A,
  input Ci,
  input B,
  output S,
  output Co
);
  sum sum_i0 (
    .A( A ),
    .B( B ),
    .Ci( Ci ),
    .S( S )
  );
  carryout carryout_i1 (
    .A( A ),
    .B( B ),
    .Ci( Ci ),
    .Co( Co )
  );
endmodule

module adder4b (
  input A0,
  input A1,
  input A2,
  input A3,
  input B0,
  input B1,
  input B2,
  input B3,
  input Ci,
  output S0,
  output S1,
  output S2,
  output S3,
  output Co
);
  wire s4;
  wire s5;
  wire s6;
  fulladder fulladder_i0 (
    .A( A0 ),
    .Ci( Ci ),
    .B( B0 ),
    .S( S0 ),
    .Co( s4 )
  );
  fulladder fulladder_i1 (
    .A( A1 ),
    .Ci( s4 ),
    .B( B1 ),
    .S( S1 ),
    .Co( s5 )
  );
  fulladder fulladder_i2 (
    .A( A2 ),
    .Ci( s5 ),
    .B( B2 ),
    .S( S2 ),
    .Co( s6 )
  );
  fulladder fulladder_i3 (
    .A( A3 ),
    .Ci( s6 ),
    .B( B3 ),
    .S( S3 ),
    .Co( Co )
  );
endmodule
